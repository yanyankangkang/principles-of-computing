"""
Cookie Clicker Simulator
"""

import simpleplot
import math
# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

import poc_clicker_provided as provided

# Constants
SIM_TIME = 10000000000.0

class ClickerState:
    """
    Simple class to keep track of the game state.
    """
    
    def __init__(self):
        self._state0 = [0.0, 0.0, 0.0, 1.0]
        self._history_state0 = [(0.0, None, 0.0, 0.0)]
        
    def __str__(self):
        """
        Return human readable state
        """
        string0 = '\ntotal_cookies:' + str(self._state0[0]) + '\ncurrent_cookies:' + str(self._state0[1]) + '\ncurrent_time:' +\
            str(self._state0[2]) + '\nCPS:' + str(self._state0[3])
        return string0 #+ str(self._history_state0)
        
    def get_cookies(self):
        """
        Return current number of cookies 
        (not total number of cookies)
        
        Should return a float
        """
        return self._state0[1]
    
    def get_cps(self):
        """
        Get current CPS

        Should return a float
        """
        return self._state0[3]
    
    def get_time(self):
        """
        Get current time

        Should return a float
        """
        return self._state0[2]
    
    def get_history(self):
        """
        Return history list

        History list should be a list of tuples of the form:
        (time, item, cost of item, total cookies)

        For example: (0.0, None, 0.0, 0.0)
        """
        return self._history_state0

    def time_until(self, cookies):
        """
        Return time until you have the given number of cookies
        (could be 0 if you already have enough cookies)

        Should return a float with no fractional part
        """
        if self._state0[1] - cookies >= 0:
            return 0.0
        else:
            f_0 = (cookies - self._state0[1]) / self._state0[3]
            f_1 = math.floor(f_0)
            #print f_1, f_0
            if f_1 == f_0:
                return f_1
            else:
                return f_1 + 1
       
    
    def wait(self, time):
        """
        Wait for given amount of time and update state

        Should do nothing if time <= 0
        """
        if time > 0:
            self._state0[2] += time
            self._state0[0] += time * self._state0[3]
            self._state0[1] += time * self._state0[3]
    
    def buy_item(self, item_name, cost, additional_cps):
        """
        Buy an item and update state

        Should do nothing if you cannot afford the item
        """
       
        if self._state0[1] >= cost:
            self._state0[1] -= cost
            self._state0[3] += additional_cps
            self._history_state0.append((self._state0[2], item_name, cost, self._state0[0]))
           
 
   
    
def simulate_clicker(build_info, duration, strategy):
    """
    Function to run a Cookie Clicker game for the given
    duration with the given strategy.  Returns a ClickerState
    object corresponding to game.
    """
    clone = build_info.clone()
    clicker = ClickerState()
    time = 0
    item_name = ""
    cost = 0
  
    while clicker.get_time() < duration:
      
        item_name = strategy(clicker.get_cookies(), clicker.get_cps(), duration - clicker.get_time(), clone)
      
        if not item_name:
            break
        cost = clone.get_cost(item_name)
        time = clicker.time_until(cost)
        
        if clicker.get_time() + time >= duration:
            break
        clicker.wait(time)
        clicker.buy_item(item_name, cost, clone.get_cps(item_name))
        clone.update_item(item_name)
      
    time = duration - clicker.get_time()
    clicker.wait(time)
    #print clicker
    item_name = strategy(clicker.get_cookies(), clicker.get_cps(), 0, clone)
    if item_name:
       while item_name and clicker.get_cookies() >= clone.get_cost(item_name):
            cost = clone.get_cost(item_name)
            clicker.buy_item(item_name, cost ,clone.get_cps(item_name))
            clone.update_item(item_name)
            item_name = strategy(clicker.get_cookies(), clicker.get_cps(), 0, clone)
               
    return clicker


def strategy_cursor(cookies, cps, time_left, build_info):
    """
    Always pick Cursor!

    Note that this simplistic strategy does not properly check whether
    it can actually buy a Cursor in the time left.  Your strategy
    functions must do this and return None rather than an item you
    can't buy in the time left.
    """
    if time_left < 0:
        return None
    else:
       
        if cookies + cps * time_left >= build_info.get_cost("Cursor"):
           return "Cursor"
        else: 
           return None


def strategy_none(cookies, cps, time_left, build_info):
    """
    Always return None
    This is a pointless strategy that you can use to help debug
    your simulate_clicker function.
    """
    return None


def strategy_cheap(cookies, cps, time_left, build_info):
    """
    extract item which has lowest cost
    """
    if time_left < 0:
        return None
    else:
        items = build_info.build_items()
        best_item1 = None
        best1 = 100000000
        for key in items:
            temp =build_info.get_cost(key)
            #print table[key][0], (cookies + time_left * cps)
            if temp  <= (cookies + time_left * cps) and temp < best1:
               best1 = temp
               best_item1 = key
        return best_item1

def strategy_expensive(cookies, cps, time_left, build_info):
    """
    extract item which has highest cost
    """
    if time_left < 0:
        return None
    else:
        items = build_info.build_items()
        best_item1 = None
        best1 = 0.0
        for key in items:
            temp = build_info.get_cost(key)
            #print table[key][0], (cookies + time_left * cps)
            if temp  <= (cookies + time_left * cps) and temp > best1:
               best1 = temp
               best_item1 = key
        return best_item1


def strategy_best(cookies, cps, time_left, build_info):
    """
    extract item which highest cps/cost
    """
    if time_left < 0:
        return None
    else:
        items = build_info.build_items()
        best_item1 = None
        best1 = 0.0
        for key in items:
            key1 = build_info.get_cps(key)
            key0 = build_info.get_cost(key)
            temp =  key1 / key0 
            if key0 - time_left * cps <= cookies and temp > best1:
               best1 = temp
               best_item1 = key
        return best_item1
    
    
def run_strategy(strategy_name, time, strategy):
    """
    Run a simulation with one strategy
    """
    #state = simulate_clicker(provided.BuildInfo(), time, strategy)
    #state = simulate_clicker(provided.BuildInfo({'Cursor': [15.0, 50.0]}, 1.15), 16, strategy_none)
    #state = simulate_clicker(provided.BuildInfo({'Cursor': [15.0, 50.0]}, 1.15), 16, strategy_cursor)
    state = simulate_clicker(provided.BuildInfo({'Cursor': [15.0, 0.10000000000000001],
                                 'Portal': [1666666.0, 6666.0], 
                                 'Shipment': [40000.0, 100.0], 
                                 'Grandma': [100.0, 0.5], 
                                 'Farm': [500.0, 4.0],
                                 'Time Machine': [123456789.0, 98765.0],
                                 'Alchemy Lab': [200000.0, 400.0], 
                                 'Factory': [3000.0, 10.0], 
                                 'Antimatter Condenser': [3999999999.0, 999999.0],
                                 'Mine': [10000.0, 40.0]}, 1.15), 10000000000.0, strategy)
    print strategy_name, ":", state

    # Plot total cookies over time

    # Uncomment out the lines below to see a plot of total cookies vs. time
    # Be sure to allow popups, if you do want to see it

    # history = state.get_history()
    # history = [(item[0], item[3]) for item in history]
    # simpleplot.plot_lines(strategy_name, 1000, 400, 'Time', 'Total Cookies', [history], True)


def run():
    """
    Run the simulator.
    """    
    #run_strategy("Cursor", SIM_TIME, strategy_cursor)
    #run_strategy("Cheap", SIM_TIME, strategy_cheap)
    run_strategy("Expensive", SIM_TIME, strategy_expensive)
    #run_strategy("Best", SIM_TIME,strategy_best) 
    # Add calls to run_strategy to run additional strategies
    # run_strategy("Cheap", SIM_TIME, strategy_cheap)
    # run_strategy("Expensive", SIM_TIME, strategy_expensive)
    # run_strategy("Best", SIM_TIME, strategy_best)
#print strategy_cheap(2.0, 1.0, 1.0, provided.BuildInfo({'A': [5.0, 1.0], 'C': [50000.0, 3.0], 'B': [500.0, 2.0]}, 1.15))
#print strategy_expensive(500000.0, 1.0, 5.0, provided.BuildInfo({'A': [5.0, 1.0], 'C': [50000.0, 3.0], 'B': [500.0, 2.0]}, 1.15)) 
#print strategy_expensive(1.0, 3.0, 17.0, provided.BuildInfo({'A': [5.0, 1.0], 'C': [50000.0, 3.0], 'B': [500.0, 2.0]}, 1.15))
run()   
