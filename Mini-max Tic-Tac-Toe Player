"""
Mini-max Tic-Tac-Toe Player
"""

import poc_ttt_gui
import poc_ttt_provided as provided

# Set timeout, as mini-max can take a long time
import codeskulptor
codeskulptor.set_timeout(60)

# SCORING VALUES - DO NOT MODIFY
SCORES = {provided.PLAYERX: 1,
          provided.DRAW: 0,
          provided.PLAYERO: -1}
EMPTY = 1
PLAYERX = 2
PLAYERO = 3 
DRAW = 4
NTRIALS = 100    # Number of trials to run
           

def mm_move(board, player):
    """
    Make a move on the board.
    
    Returns a tuple with two elements.  The first element is the score
    of the given board and the second element is the desired move as a
    tuple, (row, col).
    """
    empty_squares = board.get_empty_squares()
    
  #  print tmp_board
    if len(empty_squares) == 1 :
        unique_move = empty_squares[0]
        tmp_board = board.clone()
        tmp_board.move(unique_move[0],unique_move[1],player)
        winner = tmp_board.check_win()
        #print tmp_board
        return SCORES[winner], unique_move
    best_move = []
    best_score = -10
    for squares in empty_squares:
        tmp_board = board.clone()
        tmp_board.move(squares[0], squares[1], player)
        winner = tmp_board.check_win()
        if winner != None:
           return SCORES[winner],squares
        tmp_move = mm_move(tmp_board,provided.switch_player(player))
       # print squares
       # print tmp_board,tmp_move
        if best_score == -10 or best_score * SCORES[player] < tmp_move[0] * SCORES[player]:
           best_move = squares
           best_score = tmp_move[0]
       # print best_score
        if best_score == SCORES[player]:
           return best_score, best_move

    #print best_score,best_move
    return best_score, best_move

def move_wrapper(board, player, trials):
    """
    Wrapper to allow the use of the same infrastructure that was used
    for Monte Carlo Tic-Tac-Toe.
    """
    move = mm_move(board, player)
    #print move
    assert move[1] != (-1, -1), "returned illegal move (-1, -1)"
    return move[1]

# Test game with the console or the GUI.
# Uncomment whichever you prefer.
# Both should be commented out when you submit for
# testing to save time.

# provided.play_game(move_wrapper, 1, False)        
#poc_ttt_gui.run_gui(3, provided.PLAYERO, move_wrapper, 1, False)
#print mm_move(provided.TTTBoard(3, False, [[PLAYERX, EMPTY, EMPTY], [PLAYERO, PLAYERO, EMPTY], [EMPTY, PLAYERX, EMPTY]]), PLAYERX)
