"""
Loyd's Fifteen puzzle - solver and visualizer
Note that solved configuration has the blank (zero) tile in upper left
Use the arrows key to swap this tile with its neighbors
"""

import poc_fifteen_gui

class Puzzle:
    """
    Class representation for the Fifteen puzzle
    """

    def __init__(self, puzzle_height, puzzle_width, initial_grid=None):
        """
        Initialize puzzle with default height and width
        Returns a Puzzle object
        """
        self._height = puzzle_height
        self._width = puzzle_width
        self._grid = [[col + puzzle_width * row
                       for col in range(self._width)]
                      for row in range(self._height)]

        if initial_grid != None:
            for row in range(puzzle_height):
                for col in range(puzzle_width):
                    self._grid[row][col] = initial_grid[row][col]

    def __str__(self):
        """
        Generate string representaion for puzzle
        Returns a string
        """
        ans = ""
        for row in range(self._height):
            ans += str(self._grid[row])
            ans += "\n"
        return ans

    #####################################
    # GUI methods

    def get_height(self):
        """
        Getter for puzzle height
        Returns an integer
        """
        return self._height

    def get_width(self):
        """
        Getter for puzzle width
        Returns an integer
        """
        return self._width

    def get_number(self, row, col):
        """
        Getter for the number at tile position pos
        Returns an integer
        """
        return self._grid[row][col]

    def set_number(self, row, col, value):
        """
        Setter for the number at tile position pos
        """
        self._grid[row][col] = value

    def clone(self):
        """
        Make a copy of the puzzle to update during solving
        Returns a Puzzle object
        """
        new_puzzle = Puzzle(self._height, self._width, self._grid)
        return new_puzzle

    ########################################################
    # Core puzzle methods

    def current_position(self, solved_row, solved_col):
        """
        Locate the current position of the tile that will be at
        position (solved_row, solved_col) when the puzzle is solved
        Returns a tuple of two integers        
        """
        solved_value = (solved_col + self._width * solved_row)

        for row in range(self._height):
            for col in range(self._width):
                if self._grid[row][col] == solved_value:
                    return (row, col)
        assert False, "Value " + str(solved_value) + " not found"

    def update_puzzle(self, move_string):
        """
        Updates the puzzle state based on the provided move string
        """
        #move_string = "rdlu"
        #print str(self), move_string
        zero_row, zero_col = self.current_position(0, 0)
        for direction in move_string:
            if direction == "l":
                assert zero_col > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col - 1]
                self._grid[zero_row][zero_col - 1] = 0
                zero_col -= 1
            elif direction == "r":
                assert zero_col < self._width - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col + 1]
                self._grid[zero_row][zero_col + 1] = 0
                zero_col += 1
            elif direction == "u":
                assert zero_row > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row - 1][zero_col]
                self._grid[zero_row - 1][zero_col] = 0
                zero_row -= 1
            elif direction == "d":
                assert zero_row < self._height - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row + 1][zero_col]
                self._grid[zero_row + 1][zero_col] = 0
                zero_row += 1
            else:
                assert False, "invalid direction: " + direction

    ##################################################################
    # Phase one methods

    def lower_row_invariant(self, target_row, target_col):
        """
        Check whether the puzzle satisfies the specified invariant
        at the given position in the bottom rows of the puzzle (target_row > 1)
        Returns a boolean
        """
        if self._grid[target_row][target_col] != 0:
            return False
        for col in range(target_col+1, self.get_width()):
            if self._grid[target_row][col] != target_row * self.get_width() + col:
                return False
        if target_row + 1 < self.get_height:    
            for row in range(target_row+1, self.get_height()):
                for col in range(self.get_width()):
                     if self._grid[row][col] != row * self.get_width() + col: 
                         return False
        return True
    
    def step1_moveto1_(self, step_m1):
        """
        Slove interior_tile phase_1
        """
        move_string = ""
        for dummyj in range(abs(step_m1[1])):
            if step_m1[1] > 0:
               move_string += "r"
            else:
               move_string += "l"
        for dummyi in range(abs(step_m1[0])):
            if step_m1[0] > 0:
               move_string += "d"
            else:
               move_string += "u"
        return move_string
       
    def step_moveback1_(self, step_m1, flag):
        """
        Slove interior_tile phase_1
        """
        move_string1_ = ""
        move_string2_ = ""
        if step_m1[1] > 0:
                for dummyj in range(abs(step_m1[1])):
                     move_string1_ += "r"
        else:
                for dummyj in range(abs(step_m1[1])):
                     move_string1_ += "l"
        if step_m1[0] > 0:            
                for dummyi in range(abs(step_m1[0])):
                     move_string2_ += "d"
        else:
                for dummyi in range(abs(step_m1[0])):
                     move_string2_ += "u"
        if flag == 2:
           
            
            return move_string1_ + move_string2_
        elif flag == 1:
             
             return move_string2_ + move_string1_
    
      
    
    def step_colmove1_(self, direction, row):
        """
        Solve interior_tile phase_2 Dir means direction
        """
        if direction < 0:	
            if row == 0:
                return "dllur"
            return "ulldr"
        elif direction > 0:
            if row == 0:
                return "drrul"
            return "urrdl"
       # else:
        #    return "lddr"
        
    def step_adjust1_(self, position, row):
        """
        adjust zero_pos when do y-axis move in step1
        """
        if position[1] > 0:
            return "dr"
        if position[1] < 0:
            if row > 0:
                return "ullddr"
            else:
                return "dl"
        if position[0] < 0:
            return ""
        if position[0] > 0:
            return "lddr"
        

    
    def solve_interior_tile(self, target_row, target_col):
        """
        Place correct tile at target position
        Updates puzzle and returns a move string
        """
        move_string = ""
#        zero_pos = self.current_position(0, 0)
#        if target_col != 0:
#            Step_move = [target_row - zero_pos[0], target_col - zero_pos[1]]
#        else:
#            Step_move = [target_row - 1-  zero_pos[0], target_col +1 - zero_pos[1]]
#        frame_string = self.Step1_move_to(Step_move)
#        #print frame_string
#        if frame_string:
#            self.update_puzzle(frame_string)
#            move_string += frame_string
        #print "*",str(self)
        target_pos = self.current_position(target_row, target_col)
        step_move1_ = [target_pos[0] - target_row , target_pos[1] - target_col]
        if target_col == 0:
            step_move1_ = [ step_move1_[0] +1 ,  step_move1_[1]-1]
        frame_string = self.step_moveback1_(step_move1_,1)
        #print frame_string
        #print Step_move
        if frame_string:
            self.update_puzzle(frame_string)
            move_string += frame_string
        #print str(self)
        frame_string = ""
        target_pos = self.current_position(target_row, target_col)
        
        zero_pos = self.current_position(0,0)
        col_x = target_col - zero_pos[1]
        if target_col == 0:
            col_x += 1            
        
        #print target_pos, zero_pos
        for dummyi in range(abs(col_x)-1):
            frame_string += self.step_colmove1_(col_x,zero_pos[0])
        #print frame_string
        if frame_string:
            self.update_puzzle(frame_string)
            move_string += frame_string
        #print str(self)
        zero_pos = self.current_position(0, 0)
        target_pos = self.current_position(target_row, target_col)
        step_move1_ = [target_pos[0] - zero_pos[0] , target_pos[1] - zero_pos[1]]
        #print target_col, zero_pos,target_pos
        col_y = target_row - target_pos[0]
        if target_col == 0:
            col_y -= 1 
            if col_y == 0:
                return move_string
        else:      
            if col_y == 0:
                if zero_pos[0] == target_row -1:
                    self.update_puzzle("ld")
                    move_string += "ld"
                return move_string
        frame_string = self.step_adjust1_(step_move1_,target_pos[0])
        if frame_string:
            self.update_puzzle(frame_string)
            move_string += frame_string
        #print str(self)
        frame_string = ""
        
        for dummyj in range(abs(col_y)-1):
            frame_string += "ulddr"
        frame_string +="u"
        frame_string  += "ld"
        self.update_puzzle(frame_string )
        move_string += frame_string 
        #print str(self)
        return move_string

     
    def solve_col0_tile(self, target_row):
        """
        Solve tile in column zero on specified row (> 1)
        Updates puzzle and returns a move string
        """
        # replace with your code
        move_string = "ur"
        self.update_puzzle("ur")
        if self._grid[target_row][0] == target_row * self.get_width():
            frame_string =""
            for dummyi in range(self.get_width()-2):
                 frame_string += "r"
            
            self.update_puzzle(frame_string)
            return move_string + frame_string
        
        move_string += self.solve_interior_tile(target_row,0)
   
        move_string += "ruldrdlurdluurddlur"
        self.update_puzzle("ruldrdlurdluurddlur")
        frame_string = ""
        for dummyi in range(self.get_width()-2):
            frame_string += "r"
        self.update_puzzle(frame_string)
        return move_string + frame_string

    #############################################################
    # Phase two methods

    def row0_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row zero invariant
        at the given column (col > 1)
        Returns a boolean
        """
        if self._grid[0][target_col] != 0:
            return False

        for dummyj in range(target_col,self.get_width()):
            if self._grid[1][dummyj] != self.get_width() + dummyj:
                return False
        
        for index_i0_ in range(2,self.get_height()):
            for index_j0_ in range(self.get_width()):
                if self._grid[index_i0_][index_j0_] != index_i0_*self.get_width()+index_j0_:
                    return False
        return True

    def row1_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row one invariant
        at the given column (col > 1)
        Returns a boolean
        """
        if self._grid[1][target_col] != 0:
            return False
        for dummyj in range(target_col+1,self.get_width()):
            if self._grid[1][dummyj] != self.get_width() + dummyj:
                return False
        for index_i0_ in range(2,self.get_height()):
           for index_j0_ in range(self.get_width()):
               if self._grid[index_i0_][index_j0_] != index_i0_*self.get_width()+index_j0_:
                    return False
        return True

    def solve_row0_tile(self, target_col):
        """
        Solve the tile in row zero at the specified column
        Updates puzzle and returns a move string
        """
        #print "*0",str(self)
        move_string = ""
        target_row = 0
        target_pos = self.current_position(target_row, target_col)
       
        step_move1_ = [target_pos[0] - target_row  , target_pos[1] - target_col ]
        frame_string = self.step_moveback1_(step_move1_, 2)
        #print frame_string
        if frame_string:
            self.update_puzzle(frame_string)
            move_string += frame_string
        target_pos = self.current_position(target_row, target_col)
        if target_pos[0] == target_row and target_pos[1] == target_col:
            self.update_puzzle("d")
            return  move_string + "d"
        #print "*1",str(self)
        frame_string = ""
        #target_pos = self.current_position(target_row, target_col)
        zero_pos = self.current_position(0,0)
        
        col_x = target_col - 1 - zero_pos[1]
    
        #print target_pos, zero_pos
        #print target_col,col_x
        if zero_pos[0] == 0:
            for dummyi in range(abs(col_x)-1):    
                frame_string += "drrul"
        else:
            for dummyi in range(abs(col_x)):   
                frame_string += "ruldr"
            
        #print frame_string
        if frame_string != "":
            self.update_puzzle(frame_string)
            move_string += frame_string
        #print frame_string, "*2",str(self)
        zero_pos = self.current_position(0, 0)
        if zero_pos[1] != target_col-1:
            self.update_puzzle("druld")
            move_string += "druld"
        else:
            self.update_puzzle("uld")
            move_string += "uld"
        #print "*3",str(self)
        self.update_puzzle("urdlurrdluldrruld")
        move_string += "urdlurrdluldrruld"
        return move_string
    
    def solve_row1_tile(self, target_col):
        """
        Solve the tile in row one at the specified column
        Updates puzzle and returns a move string
        """
       
        move_string = ""
        target_row = 1
        target_pos = self.current_position(target_row, target_col)
        
        step_move1_ = [target_pos[0] - target_row , target_pos[1] - target_col]
      
        frame_string = self.step_moveback1_(step_move1_, 1)
        #print frame_string
        if frame_string:
            self.update_puzzle(frame_string)
            move_string += frame_string
        #print str(self)
        frame_string = ""
        #target_pos = self.current_position(target_row, target_col)
        zero_pos = self.current_position(0,0)
        #print str(self)
        col_x = target_col - zero_pos[1]
        
        #print target_pos, zero_pos
        for dummyi in range(abs(col_x)-1):
            frame_string += self.step_colmove1_(col_x,zero_pos[0])
        #print frame_string
        if frame_string:
            self.update_puzzle(frame_string)
            move_string += frame_string
        
        target_pos = self.current_position(target_row, target_col)
        if zero_pos[0] == 0 and zero_pos[1] == target_col:
            return move_string
        if target_pos[0] == 0:
            self.update_puzzle("dru")
            move_string += "dru"
        else:
            self.update_puzzle("ur")
            move_string += "ur"
        #print str(self)
        return move_string
    ###########################################################
    # Phase 3 methods

    def solve_2x2(self):
        """
        Solve the upper left 2x2 part of the puzzle
        Updates the puzzle and returns a move string
        """
        move_string = "ul"
        self.update_puzzle("ul")
        if self._grid[0][1] == self.get_width() + 1 and self._grid[1][0] == 1 and self._grid[1][1] == self.get_width():
            move_string += "rdlu"
            self.update_puzzle("rdlu")
        if self._grid[0][1] == self.get_width() and self._grid[1][0] == self.get_width() + 1  and self._grid[1][1] == 1:
            move_string += "rdlu"
            self.update_puzzle("rdlu")
        return move_string

    def solve_puzzle(self):
        """
        Generate a solution string for a puzzle
        Updates the puzzle and returns a move string
        """
        # replace with your code
        #new_puzzle = self.clone()
        move_string = ""
        zero_pos = self.current_position(0, 0)
        
        step_move1_ = [self.get_height() - 1 - zero_pos[0], self.get_width() - 1 - zero_pos[1]]
     
        frame_string = self.step1_moveto1_(step_move1_)
        #print frame_string
        if frame_string:
            self.update_puzzle(frame_string)
            move_string += frame_string
        for index_i0_ in range(self.get_height()-2):
            for index_j0 in range(self.get_width()-1):
                #assert new_puzzle.lower_row_invariant(self.get_height() - 1-index_i0_, self.get_width() - 1-index_j0)
                move_string += self.solve_interior_tile(self.get_height()-1-index_i0_, self.get_width()-1-index_j0)
                #print str(new_puzzle)
                #assert new_puzzle.lower_row_invariant(self.get_height()-1-index_i0_, self.get_width() - 2-index_j0)
            #assert new_puzzle.lower_row_invariant(self.get_height()-1-index_i0_, 0)   
            move_string += self.solve_col0_tile(self.get_height()-1-index_i0_)
            #print str(new_puzzle)
            #assert new_puzzle.lower_row_invariant(self.get_height() - 2 -index_i0_, self.get_width()-1)   
        #move_string += new_puzzle.solve_row1_tile(3)
        #move_string += new_puzzle.solve_row0_tile(3)
        for index_j0 in range(self.get_width()-2):
            #self.row1_invariant(self.get_width() - 1 -index_j0)
            move_string += self.solve_row1_tile(self.get_width() - 1 -index_j0)
            #self.row0_invariant(self.get_width() - 1 -index_j0)
            move_string += self.solve_row0_tile(self.get_width() - 1 -index_j0)
           # print str(new_puzzle)
        move_string += self.solve_2x2()
        return move_string

# Start interactive simulation
#obj = Puzzle(4, 4, [[0,4,1,3],[13,14,2,6],[15, 8, 5, 7], [12, 11, 10, 9]])
#obj = Puzzle(4, 4, [[0,15,14,13],[12,11,10,9],[8, 7, 6, 5], [4, 3, 2, 1]])
#obj = Puzzle(4, 4, [[12,10,13,9],[11,5,7,6],[8, 3, 0, 2], [4, 1, 14, 15]])
#obj = Puzzle(3, 2, [[1, 2],[0, 4],[3, 5]])
#obj = Puzzle(4, 4, [[5, 6, 1, 2],[4,7,3,0],[8, 9, 10, 11], [12, 13, 14, 15]])
#obj = Puzzle(2, 3, [[3,4,1],[0,2,5]])
#obj = Puzzle(2, 2, [[0,5],[4,1]])
#obj = Puzzle(3, 3, [[8, 7, 6], [5, 4, 3], [2, 1, 0]])
#obj = Puzzle(3, 3, [[3, 2, 1], [6, 5, 4], [0, 7, 8]])
#obj = Puzzle(4, 5, [[1, 2, 0, 3, 4], [6, 5, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])
#obj = Puzzle(3, 3, [[3, 0, 2], [1, 4, 5], [6, 7, 8]])
#obj = Puzzle(3, 3, [[8, 7, 6], [5, 4, 3], [2, 1, 0]])
#print obj.row0_invariant(1)
#poc_fifteen_gui.FifteenGUI(obj)
#print obj.lower_row_invariant(2, 1)

