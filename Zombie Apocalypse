"""
Student portion of Zombie Apocalypse mini-project
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
EMPTY = 0 
FULL = 1
FOUR_WAY = 0
EIGHT_WAY = 1
OBSTACLE = "obstacle"
HUMAN = "human"
ZOMBIE = "zombie"


class Zombie(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)
        if obstacle_list != None:
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []
        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._zombie_list = []
        self._human_list = [] 
        
    def add_zombie(self, row, col):
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append((row,col))
                
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)       
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        if self._zombie_list:
            for zombie in self._zombie_list:
               yield tuple(zombie) 
         

    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append((row,col))
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        # replace with an actual generator
        if self._human_list:
           for human in self._human_list:
              yield tuple(human)
      
        
    def compute_distance_field(self, entity_type):
        """
        Function computes a 2D distance field
        Distance at member of entity_queue is zero
        Shortest paths avoid obstacles and use distance_type distances
        """
  
        visited = poc_grid.Grid(self._grid_height,self._grid_width)
        visited.clear()
        distance_field = [[self._grid_height * self._grid_width for dummyi in range(self._grid_width)]
                                                                for dummyj in range(self._grid_height)]
        boundary = poc_queue.Queue()
        
        if entity_type == ZOMBIE:
           boundary_list = self._zombie_list
        else:
           boundary_list = self._human_list 
            
        for item in boundary_list:
            boundary.enqueue(item)
            visited.set_full(item[0],item[1])
            distance_field[item[0]][item[1]] = 0
        
        while len(boundary):
            current_point = boundary.dequeue()                  
            neigbourd_point = self.four_neighbors(current_point[0],current_point[1])            
            for point in neigbourd_point:                               
                if visited.is_empty( point[0],  point[1] ) and not self._cells[point[0]][point[1]] :
                   visited.set_full(point[0],point[1])
                   distance_field[point[0]][point[1]] = min(distance_field[point[0]][point[1]],distance_field[current_point[0]][current_point[1]]+1)
                   boundary.enqueue((point[0],point[1]))
              
        return distance_field
    def move_humans(self, zombie_distance):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """
         
        for  human_i_0 in range(len(self._human_list)):
           human_pos = self._human_list[human_i_0]
           distance  = 0 
           move_to = [human_pos[0],human_pos[1]] 
           for point in self.eight_neighbors(human_pos[0],human_pos[1]):
               if zombie_distance[point[0]][point[1]] > distance: 
                    move_to = [point[0],point[1]]
                    distance = zombie_distance[point[0]][point[1]]
           self._human_list[human_i_0] = move_to
    
    def move_zombies(self, human_distance):
        """
        Function that moves zombies towards humans, no diagonal moves
        are allowed
        """
        for zombie_i_0 in range(len(self._zombie_list)):
           zombie_pos = self._zombie_list[zombie_i_0]
           flag_same1_ = False
           for human_pos in self._human_list:
                if human_pos[0] == zombie_pos[0] and human_pos[1] == zombie_pos[1]:
                    flag_same1_ = True
                    break
           if  flag_same1_: 
                    continue 
           distance  = self._grid_height * self._grid_width 
           move_to = [zombie_pos[0],zombie_pos[1]] 
           for point in self.four_neighbors(zombie_pos[0],zombie_pos[1]):
               if human_distance[point[0]][point[1]] < distance: 
                    move_to = [point[0],point[1]]
                    distance = human_distance[point[0]][point[1]]
           self._zombie_list[zombie_i_0] = move_to

# Start up gui for simulation - You will need to write some code above
# before this will work without errors
poc_zombie_gui.run_gui(Zombie(30, 40))
