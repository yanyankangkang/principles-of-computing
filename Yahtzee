"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    temp_hand = list(hand)
    temp_hand.sort()
    hand = temp_hand
    old = 0 
    max_score = 0
    score_ = 0
    for new_ in hand:
        if old == new_:
            score_ += new_
        else:
            if score_ > max_score:
                max_score = score_
            score_ = new_ 
            old = new_ 
    if score_ > max_score:
        max_score = score_  
       
    return max_score


def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value of the held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    free_dice_poss = list(gen_all_sequences(range(1,num_die_sides+1),num_free_dice))
    sum_score = 0 
   
    for poss in free_dice_poss:
        sum_score += score(held_dice + poss)
    numeration = len(free_dice_poss)
    return sum_score * 1.0 / numeration


def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
   
    hand_poss = gen_unique_sequences(range(len(hand)),len(hand))
    all_holds = set([])
    for poss in hand_poss:
        temp = []
        for index in poss:
            temp.append(hand[index])
        all_holds.add(tuple(temp))
    #for length in range(1,6):
    #    hand_poss.extend(gen_all_sequences(, length))
    return all_holds



def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    all_holds = gen_all_holds(hand)
    max_expected_score = 0
    dice_to_hold = []
    print all_holds 
    for hold in all_holds:
        temp = expected_value(hold, num_die_sides, len(hand) - len(hold))
        print temp
        if temp > max_expected_score:
             dice_to_hold = hold 
             max_expected_score = temp   
    return (max_expected_score, tuple(dice_to_hold))


def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
#helper function 
def gen_unique_sequences(outcomes, length):
    '''
    generate index
    '''
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                new_sequence.sort()
                temp_set.add(tuple(set(new_sequence)))
        answer_set = temp_set
    answer_set.add(())
    return answer_set
#outcomes = [1,2,3]
#print gen_unique_sequences(range(len(outcomes)), len(outcomes))
#run_example()
#print expected_value((2, 2), 6, 2)
#print strategy((1,), 6)
#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)

                                     
    
    
    



