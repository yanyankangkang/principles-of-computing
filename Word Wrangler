"""
Student code for Word Wrangler game
"""

import urllib2
import codeskulptor
import poc_wrangler_provided as provided

WORDFILE = "assets_scrabble_words3.txt"


# Functions to manipulate ordered word lists

def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.

    Returns a new sorted list with the same elements in list1, but
    with no duplicates.

    This function can be iterative.
    """
    if list1 == []:
        return []
    new_list = [list1[0]]
    for item_i in range(1,len(list1)):
        if list1[item_i] !=new_list[len(new_list)-1]:
            new_list.append(list1[item_i])
    return new_list

def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.

    Returns a new sorted list containing only elements that are in
    both list1 and list2.

    This function can be iterative.
    """
    item_j = 0
    item_i = 0
    new_list = []
    while item_i < len(list1):
        if item_j == len(list2):
            break
        if list1[item_i] == list2[item_j]:
           new_list.append(list1[item_i])
           item_j += 1
           item_i += 1
        elif list1[item_i] > list2[item_j]:
            item_j += 1
        elif list1[item_i] < list2[item_j]:
            item_i += 1
         
    return new_list

# Functions to perform merge sort

def merge(list1, list2):
    """
    Merge two sorted lists.

    Returns a new sorted list containing all of the elements that
    are in both list1 and list2.

    This function can be iterative.
    """   
    item_i = 0
    item_j = 0
    new_list = [] 
    while item_i < len(list1) or item_j < len(list2) :
          if item_j == len(list2) :  
             new_list.append(list1[item_i])
             item_i += 1
          elif item_i == len(list1):  
               new_list.append(list2[item_j])
               item_j += 1
          if item_j < len(list2) and item_i < len(list1):    
            if list1[item_i] < list2[item_j]:
               new_list.append(list1[item_i])
               item_i += 1
            elif list1[item_i] >= list2[item_j]:
               new_list.append(list2[item_j])
               item_j += 1
    return new_list
                
def merge_sort(list1):
    """
    Sort the elements of list1.
    
    Return a new sorted list with the same elements as list1.

    This function should be recursive.
    """
    if len(list1) <= 1:
        return list1
    list1_left = list1[0:len(list1)/2]
    list1_right =  list1[len(list1)/2:len(list1)]
    new_list_left = merge_sort(list1_left)
    new_list_right = merge_sort(list1_right)
    new_list = merge(new_list_left, new_list_right)
    return new_list

# Function to generate all strings for the word wrangler game

def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.

    Returns a list of all strings that can be formed from the letters
    in word.

    This function should be recursive.
    """
    if len(word) == 0:
        return [""]
    word_ch = word[0]
    generated_word = gen_all_strings(word[1:len(word)])
    new_word = list(generated_word)
    new_word.extend(word_ch)
    for word in generated_word:
        if word == "":
           continue
        if len(word) > 1: 
           for pos in range(1,len(word)):
               new_word.append(word[0:pos] + word_ch + word[pos:len(word)])
        new_word.extend([word_ch + word, word + word_ch])    
    return new_word

# Function to load words from a file

def load_words(filename):
    """
    Load word list from the file named filename.

    Returns a list of strings.
    """
    strings_list = []
    url = codeskulptor.file2url(filename)
    net_file = urllib2.urlopen(url)
    for line in net_file.readlines():
        strings_list.append(line[0:len(line)-2])
    return strings_list

def run():
    """
    Run game.
    """
    words = load_words(WORDFILE)
    wrangler = provided.WordWrangler(words, remove_duplicates, 
                                     intersect, merge_sort, 
                                     gen_all_strings)
    provided.run_game(wrangler)

# Uncomment when you are ready to try the game
run()
#print remove_duplicates([1,1,1,1,2,2,3,3,4,5,5])
#list1 =[1,2,2,3,3,4,5]
#list2 = [2,2,3]
#print intersect(list1, list2)    
#print merge_sort([])
#print gen_all_strings('def')
#print intersect([17], [3, 8, 17])
